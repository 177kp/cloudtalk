// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#ifndef PROTOBUF_INCLUDED_IM_2eLogin_2eproto
#define PROTOBUF_INCLUDED_IM_2eLogin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_IM_2eLogin_2eproto 

namespace protobuf_IM_2eLogin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_IM_2eLogin_2eproto
namespace IM {
namespace Login {
class IMDeviceTokenReq;
class IMDeviceTokenReqDefaultTypeInternal;
extern IMDeviceTokenReqDefaultTypeInternal _IMDeviceTokenReq_default_instance_;
class IMDeviceTokenRsp;
class IMDeviceTokenRspDefaultTypeInternal;
extern IMDeviceTokenRspDefaultTypeInternal _IMDeviceTokenRsp_default_instance_;
class IMKickPCClientReq;
class IMKickPCClientReqDefaultTypeInternal;
extern IMKickPCClientReqDefaultTypeInternal _IMKickPCClientReq_default_instance_;
class IMKickPCClientRsp;
class IMKickPCClientRspDefaultTypeInternal;
extern IMKickPCClientRspDefaultTypeInternal _IMKickPCClientRsp_default_instance_;
class IMKickUser;
class IMKickUserDefaultTypeInternal;
extern IMKickUserDefaultTypeInternal _IMKickUser_default_instance_;
class IMLoginReq;
class IMLoginReqDefaultTypeInternal;
extern IMLoginReqDefaultTypeInternal _IMLoginReq_default_instance_;
class IMLoginRes;
class IMLoginResDefaultTypeInternal;
extern IMLoginResDefaultTypeInternal _IMLoginRes_default_instance_;
class IMLogoutReq;
class IMLogoutReqDefaultTypeInternal;
extern IMLogoutReqDefaultTypeInternal _IMLogoutReq_default_instance_;
class IMLogoutRsp;
class IMLogoutRspDefaultTypeInternal;
extern IMLogoutRspDefaultTypeInternal _IMLogoutRsp_default_instance_;
class IMMsgServReq;
class IMMsgServReqDefaultTypeInternal;
extern IMMsgServReqDefaultTypeInternal _IMMsgServReq_default_instance_;
class IMMsgServRsp;
class IMMsgServRspDefaultTypeInternal;
extern IMMsgServRspDefaultTypeInternal _IMMsgServRsp_default_instance_;
class IMPushShieldReq;
class IMPushShieldReqDefaultTypeInternal;
extern IMPushShieldReqDefaultTypeInternal _IMPushShieldReq_default_instance_;
class IMPushShieldRsp;
class IMPushShieldRspDefaultTypeInternal;
extern IMPushShieldRspDefaultTypeInternal _IMPushShieldRsp_default_instance_;
class IMQueryPushShieldReq;
class IMQueryPushShieldReqDefaultTypeInternal;
extern IMQueryPushShieldReqDefaultTypeInternal _IMQueryPushShieldReq_default_instance_;
class IMQueryPushShieldRsp;
class IMQueryPushShieldRspDefaultTypeInternal;
extern IMQueryPushShieldRspDefaultTypeInternal _IMQueryPushShieldRsp_default_instance_;
}  // namespace Login
}  // namespace IM
namespace google {
namespace protobuf {
template<> ::IM::Login::IMDeviceTokenReq* Arena::CreateMaybeMessage<::IM::Login::IMDeviceTokenReq>(Arena*);
template<> ::IM::Login::IMDeviceTokenRsp* Arena::CreateMaybeMessage<::IM::Login::IMDeviceTokenRsp>(Arena*);
template<> ::IM::Login::IMKickPCClientReq* Arena::CreateMaybeMessage<::IM::Login::IMKickPCClientReq>(Arena*);
template<> ::IM::Login::IMKickPCClientRsp* Arena::CreateMaybeMessage<::IM::Login::IMKickPCClientRsp>(Arena*);
template<> ::IM::Login::IMKickUser* Arena::CreateMaybeMessage<::IM::Login::IMKickUser>(Arena*);
template<> ::IM::Login::IMLoginReq* Arena::CreateMaybeMessage<::IM::Login::IMLoginReq>(Arena*);
template<> ::IM::Login::IMLoginRes* Arena::CreateMaybeMessage<::IM::Login::IMLoginRes>(Arena*);
template<> ::IM::Login::IMLogoutReq* Arena::CreateMaybeMessage<::IM::Login::IMLogoutReq>(Arena*);
template<> ::IM::Login::IMLogoutRsp* Arena::CreateMaybeMessage<::IM::Login::IMLogoutRsp>(Arena*);
template<> ::IM::Login::IMMsgServReq* Arena::CreateMaybeMessage<::IM::Login::IMMsgServReq>(Arena*);
template<> ::IM::Login::IMMsgServRsp* Arena::CreateMaybeMessage<::IM::Login::IMMsgServRsp>(Arena*);
template<> ::IM::Login::IMPushShieldReq* Arena::CreateMaybeMessage<::IM::Login::IMPushShieldReq>(Arena*);
template<> ::IM::Login::IMPushShieldRsp* Arena::CreateMaybeMessage<::IM::Login::IMPushShieldRsp>(Arena*);
template<> ::IM::Login::IMQueryPushShieldReq* Arena::CreateMaybeMessage<::IM::Login::IMQueryPushShieldReq>(Arena*);
template<> ::IM::Login::IMQueryPushShieldRsp* Arena::CreateMaybeMessage<::IM::Login::IMQueryPushShieldRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace IM {
namespace Login {

// ===================================================================

class IMMsgServReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMMsgServReq) */ {
 public:
  IMMsgServReq();
  virtual ~IMMsgServReq();

  IMMsgServReq(const IMMsgServReq& from);

  inline IMMsgServReq& operator=(const IMMsgServReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMMsgServReq(IMMsgServReq&& from) noexcept
    : IMMsgServReq() {
    *this = ::std::move(from);
  }

  inline IMMsgServReq& operator=(IMMsgServReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMMsgServReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgServReq* internal_default_instance() {
    return reinterpret_cast<const IMMsgServReq*>(
               &_IMMsgServReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IMMsgServReq* other);
  friend void swap(IMMsgServReq& a, IMMsgServReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServReq* New() const final {
    return CreateMaybeMessage<IMMsgServReq>(NULL);
  }

  IMMsgServReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMMsgServReq& from);
  void MergeFrom(const IMMsgServReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMMsgServReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Login.IMMsgServReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMMsgServRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMMsgServRsp) */ {
 public:
  IMMsgServRsp();
  virtual ~IMMsgServRsp();

  IMMsgServRsp(const IMMsgServRsp& from);

  inline IMMsgServRsp& operator=(const IMMsgServRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMMsgServRsp(IMMsgServRsp&& from) noexcept
    : IMMsgServRsp() {
    *this = ::std::move(from);
  }

  inline IMMsgServRsp& operator=(IMMsgServRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMMsgServRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgServRsp* internal_default_instance() {
    return reinterpret_cast<const IMMsgServRsp*>(
               &_IMMsgServRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMMsgServRsp* other);
  friend void swap(IMMsgServRsp& a, IMMsgServRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServRsp* New() const final {
    return CreateMaybeMessage<IMMsgServRsp>(NULL);
  }

  IMMsgServRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMMsgServRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMMsgServRsp& from);
  void MergeFrom(const IMMsgServRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMMsgServRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string prior_ip = 2;
  bool has_prior_ip() const;
  void clear_prior_ip();
  static const int kPriorIpFieldNumber = 2;
  const ::std::string& prior_ip() const;
  void set_prior_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_prior_ip(::std::string&& value);
  #endif
  void set_prior_ip(const char* value);
  void set_prior_ip(const char* value, size_t size);
  ::std::string* mutable_prior_ip();
  ::std::string* release_prior_ip();
  void set_allocated_prior_ip(::std::string* prior_ip);

  // optional string backip_ip = 3;
  bool has_backip_ip() const;
  void clear_backip_ip();
  static const int kBackipIpFieldNumber = 3;
  const ::std::string& backip_ip() const;
  void set_backip_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_backip_ip(::std::string&& value);
  #endif
  void set_backip_ip(const char* value);
  void set_backip_ip(const char* value, size_t size);
  ::std::string* mutable_backip_ip();
  ::std::string* release_backip_ip();
  void set_allocated_backip_ip(::std::string* backip_ip);

  // required .IM.BaseDefine.ResultType result_code = 1;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  ::IM::BaseDefine::ResultType result_code() const;
  void set_result_code(::IM::BaseDefine::ResultType value);

  // optional uint32 port = 4;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMMsgServRsp)
 private:
  void set_has_result_code();
  void clear_has_result_code();
  void set_has_prior_ip();
  void clear_has_prior_ip();
  void set_has_backip_ip();
  void clear_has_backip_ip();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr prior_ip_;
  ::google::protobuf::internal::ArenaStringPtr backip_ip_;
  int result_code_;
  ::google::protobuf::uint32 port_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMLoginReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMLoginReq) */ {
 public:
  IMLoginReq();
  virtual ~IMLoginReq();

  IMLoginReq(const IMLoginReq& from);

  inline IMLoginReq& operator=(const IMLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMLoginReq(IMLoginReq&& from) noexcept
    : IMLoginReq() {
    *this = ::std::move(from);
  }

  inline IMLoginReq& operator=(IMLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMLoginReq* internal_default_instance() {
    return reinterpret_cast<const IMLoginReq*>(
               &_IMLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(IMLoginReq* other);
  friend void swap(IMLoginReq& a, IMLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMLoginReq* New() const final {
    return CreateMaybeMessage<IMLoginReq>(NULL);
  }

  IMLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMLoginReq& from);
  void MergeFrom(const IMLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user_name = 1;
  bool has_user_name() const;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string client_version = 5;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 5;
  const ::std::string& client_version() const;
  void set_client_version(const ::std::string& value);
  #if LANG_CXX11
  void set_client_version(::std::string&& value);
  #endif
  void set_client_version(const char* value);
  void set_client_version(const char* value, size_t size);
  ::std::string* mutable_client_version();
  ::std::string* release_client_version();
  void set_allocated_client_version(::std::string* client_version);

  // required string user_id = 6;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 6;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string appid = 7;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 7;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const char* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // required string token = 8;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 8;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required .IM.BaseDefine.UserStatType online_status = 3;
  bool has_online_status() const;
  void clear_online_status();
  static const int kOnlineStatusFieldNumber = 3;
  ::IM::BaseDefine::UserStatType online_status() const;
  void set_online_status(::IM::BaseDefine::UserStatType value);

  // required .IM.BaseDefine.ClientType client_type = 4;
  bool has_client_type() const;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 4;
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLoginReq)
 private:
  void set_has_user_name();
  void clear_has_user_name();
  void set_has_password();
  void clear_has_password();
  void set_has_online_status();
  void clear_has_online_status();
  void set_has_client_type();
  void clear_has_client_type();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_appid();
  void clear_has_appid();
  void set_has_token();
  void clear_has_token();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr client_version_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  int online_status_;
  int client_type_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMLoginRes : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMLoginRes) */ {
 public:
  IMLoginRes();
  virtual ~IMLoginRes();

  IMLoginRes(const IMLoginRes& from);

  inline IMLoginRes& operator=(const IMLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMLoginRes(IMLoginRes&& from) noexcept
    : IMLoginRes() {
    *this = ::std::move(from);
  }

  inline IMLoginRes& operator=(IMLoginRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMLoginRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMLoginRes* internal_default_instance() {
    return reinterpret_cast<const IMLoginRes*>(
               &_IMLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(IMLoginRes* other);
  friend void swap(IMLoginRes& a, IMLoginRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMLoginRes* New() const final {
    return CreateMaybeMessage<IMLoginRes>(NULL);
  }

  IMLoginRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMLoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMLoginRes& from);
  void MergeFrom(const IMLoginRes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMLoginRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result_string = 3;
  bool has_result_string() const;
  void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  const ::std::string& result_string() const;
  void set_result_string(const ::std::string& value);
  #if LANG_CXX11
  void set_result_string(::std::string&& value);
  #endif
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  ::std::string* mutable_result_string();
  ::std::string* release_result_string();
  void set_allocated_result_string(::std::string* result_string);

  // optional .IM.BaseDefine.UserInfo user_info = 5;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 5;
  private:
  const ::IM::BaseDefine::UserInfo& _internal_user_info() const;
  public:
  const ::IM::BaseDefine::UserInfo& user_info() const;
  ::IM::BaseDefine::UserInfo* release_user_info();
  ::IM::BaseDefine::UserInfo* mutable_user_info();
  void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // required uint32 server_time = 1;
  bool has_server_time() const;
  void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::uint32 server_time() const;
  void set_server_time(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.ResultType result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::IM::BaseDefine::ResultType result_code() const;
  void set_result_code(::IM::BaseDefine::ResultType value);

  // optional .IM.BaseDefine.UserStatType online_status = 4;
  bool has_online_status() const;
  void clear_online_status();
  static const int kOnlineStatusFieldNumber = 4;
  ::IM::BaseDefine::UserStatType online_status() const;
  void set_online_status(::IM::BaseDefine::UserStatType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLoginRes)
 private:
  void set_has_server_time();
  void clear_has_server_time();
  void set_has_result_code();
  void clear_has_result_code();
  void set_has_result_string();
  void clear_has_result_string();
  void set_has_online_status();
  void clear_has_online_status();
  void set_has_user_info();
  void clear_has_user_info();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr result_string_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::google::protobuf::uint32 server_time_;
  int result_code_;
  int online_status_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMLogoutReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMLogoutReq) */ {
 public:
  IMLogoutReq();
  virtual ~IMLogoutReq();

  IMLogoutReq(const IMLogoutReq& from);

  inline IMLogoutReq& operator=(const IMLogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMLogoutReq(IMLogoutReq&& from) noexcept
    : IMLogoutReq() {
    *this = ::std::move(from);
  }

  inline IMLogoutReq& operator=(IMLogoutReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMLogoutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMLogoutReq* internal_default_instance() {
    return reinterpret_cast<const IMLogoutReq*>(
               &_IMLogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IMLogoutReq* other);
  friend void swap(IMLogoutReq& a, IMLogoutReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMLogoutReq* New() const final {
    return CreateMaybeMessage<IMLogoutReq>(NULL);
  }

  IMLogoutReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMLogoutReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMLogoutReq& from);
  void MergeFrom(const IMLogoutReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMLogoutReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Login.IMLogoutReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMLogoutRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMLogoutRsp) */ {
 public:
  IMLogoutRsp();
  virtual ~IMLogoutRsp();

  IMLogoutRsp(const IMLogoutRsp& from);

  inline IMLogoutRsp& operator=(const IMLogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMLogoutRsp(IMLogoutRsp&& from) noexcept
    : IMLogoutRsp() {
    *this = ::std::move(from);
  }

  inline IMLogoutRsp& operator=(IMLogoutRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMLogoutRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMLogoutRsp* internal_default_instance() {
    return reinterpret_cast<const IMLogoutRsp*>(
               &_IMLogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IMLogoutRsp* other);
  friend void swap(IMLogoutRsp& a, IMLogoutRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMLogoutRsp* New() const final {
    return CreateMaybeMessage<IMLogoutRsp>(NULL);
  }

  IMLogoutRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMLogoutRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMLogoutRsp& from);
  void MergeFrom(const IMLogoutRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMLogoutRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result_code = 1;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMLogoutRsp)
 private:
  void set_has_result_code();
  void clear_has_result_code();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 result_code_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMKickUser : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMKickUser) */ {
 public:
  IMKickUser();
  virtual ~IMKickUser();

  IMKickUser(const IMKickUser& from);

  inline IMKickUser& operator=(const IMKickUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMKickUser(IMKickUser&& from) noexcept
    : IMKickUser() {
    *this = ::std::move(from);
  }

  inline IMKickUser& operator=(IMKickUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMKickUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMKickUser* internal_default_instance() {
    return reinterpret_cast<const IMKickUser*>(
               &_IMKickUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(IMKickUser* other);
  friend void swap(IMKickUser& a, IMKickUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMKickUser* New() const final {
    return CreateMaybeMessage<IMKickUser>(NULL);
  }

  IMKickUser* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMKickUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMKickUser& from);
  void MergeFrom(const IMKickUser& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMKickUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // required .IM.BaseDefine.KickReasonType kick_reason = 2;
  bool has_kick_reason() const;
  void clear_kick_reason();
  static const int kKickReasonFieldNumber = 2;
  ::IM::BaseDefine::KickReasonType kick_reason() const;
  void set_kick_reason(::IM::BaseDefine::KickReasonType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickUser)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_kick_reason();
  void clear_has_kick_reason();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 user_id_;
  int kick_reason_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMDeviceTokenReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMDeviceTokenReq) */ {
 public:
  IMDeviceTokenReq();
  virtual ~IMDeviceTokenReq();

  IMDeviceTokenReq(const IMDeviceTokenReq& from);

  inline IMDeviceTokenReq& operator=(const IMDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMDeviceTokenReq(IMDeviceTokenReq&& from) noexcept
    : IMDeviceTokenReq() {
    *this = ::std::move(from);
  }

  inline IMDeviceTokenReq& operator=(IMDeviceTokenReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMDeviceTokenReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDeviceTokenReq* internal_default_instance() {
    return reinterpret_cast<const IMDeviceTokenReq*>(
               &_IMDeviceTokenReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(IMDeviceTokenReq* other);
  friend void swap(IMDeviceTokenReq& a, IMDeviceTokenReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMDeviceTokenReq* New() const final {
    return CreateMaybeMessage<IMDeviceTokenReq>(NULL);
  }

  IMDeviceTokenReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMDeviceTokenReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMDeviceTokenReq& from);
  void MergeFrom(const IMDeviceTokenReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDeviceTokenReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string device_token = 2;
  bool has_device_token() const;
  void clear_device_token();
  static const int kDeviceTokenFieldNumber = 2;
  const ::std::string& device_token() const;
  void set_device_token(const ::std::string& value);
  #if LANG_CXX11
  void set_device_token(::std::string&& value);
  #endif
  void set_device_token(const char* value);
  void set_device_token(const char* value, size_t size);
  ::std::string* mutable_device_token();
  ::std::string* release_device_token();
  void set_allocated_device_token(::std::string* device_token);

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // optional .IM.BaseDefine.ClientType client_type = 3;
  bool has_client_type() const;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMDeviceTokenReq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_device_token();
  void clear_has_device_token();
  void set_has_client_type();
  void clear_has_client_type();
  void set_has_attach_data();
  void clear_has_attach_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr device_token_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMDeviceTokenRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMDeviceTokenRsp) */ {
 public:
  IMDeviceTokenRsp();
  virtual ~IMDeviceTokenRsp();

  IMDeviceTokenRsp(const IMDeviceTokenRsp& from);

  inline IMDeviceTokenRsp& operator=(const IMDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMDeviceTokenRsp(IMDeviceTokenRsp&& from) noexcept
    : IMDeviceTokenRsp() {
    *this = ::std::move(from);
  }

  inline IMDeviceTokenRsp& operator=(IMDeviceTokenRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMDeviceTokenRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMDeviceTokenRsp* internal_default_instance() {
    return reinterpret_cast<const IMDeviceTokenRsp*>(
               &_IMDeviceTokenRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(IMDeviceTokenRsp* other);
  friend void swap(IMDeviceTokenRsp& a, IMDeviceTokenRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMDeviceTokenRsp* New() const final {
    return CreateMaybeMessage<IMDeviceTokenRsp>(NULL);
  }

  IMDeviceTokenRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMDeviceTokenRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMDeviceTokenRsp& from);
  void MergeFrom(const IMDeviceTokenRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMDeviceTokenRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMDeviceTokenRsp)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_attach_data();
  void clear_has_attach_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMKickPCClientReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMKickPCClientReq) */ {
 public:
  IMKickPCClientReq();
  virtual ~IMKickPCClientReq();

  IMKickPCClientReq(const IMKickPCClientReq& from);

  inline IMKickPCClientReq& operator=(const IMKickPCClientReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMKickPCClientReq(IMKickPCClientReq&& from) noexcept
    : IMKickPCClientReq() {
    *this = ::std::move(from);
  }

  inline IMKickPCClientReq& operator=(IMKickPCClientReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMKickPCClientReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMKickPCClientReq* internal_default_instance() {
    return reinterpret_cast<const IMKickPCClientReq*>(
               &_IMKickPCClientReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(IMKickPCClientReq* other);
  friend void swap(IMKickPCClientReq& a, IMKickPCClientReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMKickPCClientReq* New() const final {
    return CreateMaybeMessage<IMKickPCClientReq>(NULL);
  }

  IMKickPCClientReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMKickPCClientReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMKickPCClientReq& from);
  void MergeFrom(const IMKickPCClientReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMKickPCClientReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickPCClientReq)
 private:
  void set_has_user_id();
  void clear_has_user_id();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMKickPCClientRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMKickPCClientRsp) */ {
 public:
  IMKickPCClientRsp();
  virtual ~IMKickPCClientRsp();

  IMKickPCClientRsp(const IMKickPCClientRsp& from);

  inline IMKickPCClientRsp& operator=(const IMKickPCClientRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMKickPCClientRsp(IMKickPCClientRsp&& from) noexcept
    : IMKickPCClientRsp() {
    *this = ::std::move(from);
  }

  inline IMKickPCClientRsp& operator=(IMKickPCClientRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMKickPCClientRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMKickPCClientRsp* internal_default_instance() {
    return reinterpret_cast<const IMKickPCClientRsp*>(
               &_IMKickPCClientRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(IMKickPCClientRsp* other);
  friend void swap(IMKickPCClientRsp& a, IMKickPCClientRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMKickPCClientRsp* New() const final {
    return CreateMaybeMessage<IMKickPCClientRsp>(NULL);
  }

  IMKickPCClientRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMKickPCClientRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMKickPCClientRsp& from);
  void MergeFrom(const IMKickPCClientRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMKickPCClientRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMKickPCClientRsp)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_result_code();
  void clear_has_result_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMPushShieldReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMPushShieldReq) */ {
 public:
  IMPushShieldReq();
  virtual ~IMPushShieldReq();

  IMPushShieldReq(const IMPushShieldReq& from);

  inline IMPushShieldReq& operator=(const IMPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMPushShieldReq(IMPushShieldReq&& from) noexcept
    : IMPushShieldReq() {
    *this = ::std::move(from);
  }

  inline IMPushShieldReq& operator=(IMPushShieldReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMPushShieldReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMPushShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMPushShieldReq*>(
               &_IMPushShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(IMPushShieldReq* other);
  friend void swap(IMPushShieldReq& a, IMPushShieldReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMPushShieldReq* New() const final {
    return CreateMaybeMessage<IMPushShieldReq>(NULL);
  }

  IMPushShieldReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMPushShieldReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMPushShieldReq& from);
  void MergeFrom(const IMPushShieldReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMPushShieldReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // required uint32 shield_status = 2;
  bool has_shield_status() const;
  void clear_shield_status();
  static const int kShieldStatusFieldNumber = 2;
  ::google::protobuf::uint32 shield_status() const;
  void set_shield_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMPushShieldReq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_shield_status();
  void clear_has_shield_status();
  void set_has_attach_data();
  void clear_has_attach_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 shield_status_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMPushShieldRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMPushShieldRsp) */ {
 public:
  IMPushShieldRsp();
  virtual ~IMPushShieldRsp();

  IMPushShieldRsp(const IMPushShieldRsp& from);

  inline IMPushShieldRsp& operator=(const IMPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMPushShieldRsp(IMPushShieldRsp&& from) noexcept
    : IMPushShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMPushShieldRsp& operator=(IMPushShieldRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMPushShieldRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMPushShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMPushShieldRsp*>(
               &_IMPushShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(IMPushShieldRsp* other);
  friend void swap(IMPushShieldRsp& a, IMPushShieldRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMPushShieldRsp* New() const final {
    return CreateMaybeMessage<IMPushShieldRsp>(NULL);
  }

  IMPushShieldRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMPushShieldRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMPushShieldRsp& from);
  void MergeFrom(const IMPushShieldRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMPushShieldRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 shield_status = 3;
  bool has_shield_status() const;
  void clear_shield_status();
  static const int kShieldStatusFieldNumber = 3;
  ::google::protobuf::uint32 shield_status() const;
  void set_shield_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMPushShieldRsp)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_result_code();
  void clear_has_result_code();
  void set_has_shield_status();
  void clear_has_shield_status();
  void set_has_attach_data();
  void clear_has_attach_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 shield_status_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMQueryPushShieldReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMQueryPushShieldReq) */ {
 public:
  IMQueryPushShieldReq();
  virtual ~IMQueryPushShieldReq();

  IMQueryPushShieldReq(const IMQueryPushShieldReq& from);

  inline IMQueryPushShieldReq& operator=(const IMQueryPushShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMQueryPushShieldReq(IMQueryPushShieldReq&& from) noexcept
    : IMQueryPushShieldReq() {
    *this = ::std::move(from);
  }

  inline IMQueryPushShieldReq& operator=(IMQueryPushShieldReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMQueryPushShieldReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMQueryPushShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMQueryPushShieldReq*>(
               &_IMQueryPushShieldReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(IMQueryPushShieldReq* other);
  friend void swap(IMQueryPushShieldReq& a, IMQueryPushShieldReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMQueryPushShieldReq* New() const final {
    return CreateMaybeMessage<IMQueryPushShieldReq>(NULL);
  }

  IMQueryPushShieldReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMQueryPushShieldReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMQueryPushShieldReq& from);
  void MergeFrom(const IMQueryPushShieldReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMQueryPushShieldReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMQueryPushShieldReq)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_attach_data();
  void clear_has_attach_data();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 user_id_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMQueryPushShieldRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:IM.Login.IMQueryPushShieldRsp) */ {
 public:
  IMQueryPushShieldRsp();
  virtual ~IMQueryPushShieldRsp();

  IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from);

  inline IMQueryPushShieldRsp& operator=(const IMQueryPushShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMQueryPushShieldRsp(IMQueryPushShieldRsp&& from) noexcept
    : IMQueryPushShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMQueryPushShieldRsp& operator=(IMQueryPushShieldRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IMQueryPushShieldRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMQueryPushShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMQueryPushShieldRsp*>(
               &_IMQueryPushShieldRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(IMQueryPushShieldRsp* other);
  friend void swap(IMQueryPushShieldRsp& a, IMQueryPushShieldRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMQueryPushShieldRsp* New() const final {
    return CreateMaybeMessage<IMQueryPushShieldRsp>(NULL);
  }

  IMQueryPushShieldRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMQueryPushShieldRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IMQueryPushShieldRsp& from);
  void MergeFrom(const IMQueryPushShieldRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IMQueryPushShieldRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes attach_data = 20;
  bool has_attach_data() const;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // required uint32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // required uint32 result_code = 2;
  bool has_result_code() const;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // optional uint32 shield_status = 3;
  bool has_shield_status() const;
  void clear_shield_status();
  static const int kShieldStatusFieldNumber = 3;
  ::google::protobuf::uint32 shield_status() const;
  void set_shield_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Login.IMQueryPushShieldRsp)
 private:
  void set_has_user_id();
  void clear_has_user_id();
  void set_has_result_code();
  void clear_has_result_code();
  void set_has_shield_status();
  void clear_has_shield_status();
  void set_has_attach_data();
  void clear_has_attach_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 shield_status_;
  friend struct ::protobuf_IM_2eLogin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMMsgServReq

// -------------------------------------------------------------------

// IMMsgServRsp

// required .IM.BaseDefine.ResultType result_code = 1;
inline bool IMMsgServRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMMsgServRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMMsgServRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMMsgServRsp::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMMsgServRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMMsgServRsp::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.result_code)
}

// optional string prior_ip = 2;
inline bool IMMsgServRsp::has_prior_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMMsgServRsp::set_has_prior_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMMsgServRsp::clear_has_prior_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMMsgServRsp::clear_prior_ip() {
  prior_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prior_ip();
}
inline const ::std::string& IMMsgServRsp::prior_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.prior_ip)
  return prior_ip_.GetNoArena();
}
inline void IMMsgServRsp::set_prior_ip(const ::std::string& value) {
  set_has_prior_ip();
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.prior_ip)
}
#if LANG_CXX11
inline void IMMsgServRsp::set_prior_ip(::std::string&& value) {
  set_has_prior_ip();
  prior_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMMsgServRsp.prior_ip)
}
#endif
inline void IMMsgServRsp::set_prior_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prior_ip();
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMMsgServRsp.prior_ip)
}
inline void IMMsgServRsp::set_prior_ip(const char* value, size_t size) {
  set_has_prior_ip();
  prior_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMMsgServRsp.prior_ip)
}
inline ::std::string* IMMsgServRsp::mutable_prior_ip() {
  set_has_prior_ip();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRsp.prior_ip)
  return prior_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMMsgServRsp::release_prior_ip() {
  // @@protoc_insertion_point(field_release:IM.Login.IMMsgServRsp.prior_ip)
  if (!has_prior_ip()) {
    return NULL;
  }
  clear_has_prior_ip();
  return prior_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgServRsp::set_allocated_prior_ip(::std::string* prior_ip) {
  if (prior_ip != NULL) {
    set_has_prior_ip();
  } else {
    clear_has_prior_ip();
  }
  prior_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prior_ip);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRsp.prior_ip)
}

// optional string backip_ip = 3;
inline bool IMMsgServRsp::has_backip_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMMsgServRsp::set_has_backip_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMMsgServRsp::clear_has_backip_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMMsgServRsp::clear_backip_ip() {
  backip_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_backip_ip();
}
inline const ::std::string& IMMsgServRsp::backip_ip() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.backip_ip)
  return backip_ip_.GetNoArena();
}
inline void IMMsgServRsp::set_backip_ip(const ::std::string& value) {
  set_has_backip_ip();
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.backip_ip)
}
#if LANG_CXX11
inline void IMMsgServRsp::set_backip_ip(::std::string&& value) {
  set_has_backip_ip();
  backip_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMMsgServRsp.backip_ip)
}
#endif
inline void IMMsgServRsp::set_backip_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_backip_ip();
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMMsgServRsp.backip_ip)
}
inline void IMMsgServRsp::set_backip_ip(const char* value, size_t size) {
  set_has_backip_ip();
  backip_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMMsgServRsp.backip_ip)
}
inline ::std::string* IMMsgServRsp::mutable_backip_ip() {
  set_has_backip_ip();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMMsgServRsp.backip_ip)
  return backip_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMMsgServRsp::release_backip_ip() {
  // @@protoc_insertion_point(field_release:IM.Login.IMMsgServRsp.backip_ip)
  if (!has_backip_ip()) {
    return NULL;
  }
  clear_has_backip_ip();
  return backip_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgServRsp::set_allocated_backip_ip(::std::string* backip_ip) {
  if (backip_ip != NULL) {
    set_has_backip_ip();
  } else {
    clear_has_backip_ip();
  }
  backip_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backip_ip);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMMsgServRsp.backip_ip)
}

// optional uint32 port = 4;
inline bool IMMsgServRsp::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMMsgServRsp::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMMsgServRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMMsgServRsp::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 IMMsgServRsp::port() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMMsgServRsp.port)
  return port_;
}
inline void IMMsgServRsp::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMMsgServRsp.port)
}

// -------------------------------------------------------------------

// IMLoginReq

// required string user_name = 1;
inline bool IMLoginReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
inline const ::std::string& IMLoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.user_name)
  return user_name_.GetNoArena();
}
inline void IMLoginReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.user_name)
}
#if LANG_CXX11
inline void IMLoginReq::set_user_name(::std::string&& value) {
  set_has_user_name();
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.user_name)
}
#endif
inline void IMLoginReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.user_name)
}
inline void IMLoginReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.user_name)
}
inline ::std::string* IMLoginReq::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.user_name)
  if (!has_user_name()) {
    return NULL;
  }
  clear_has_user_name();
  return user_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.user_name)
}

// required string password = 2;
inline bool IMLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& IMLoginReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.password)
  return password_.GetNoArena();
}
inline void IMLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.password)
}
#if LANG_CXX11
inline void IMLoginReq::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.password)
}
#endif
inline void IMLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.password)
}
inline void IMLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.password)
}
inline ::std::string* IMLoginReq::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.password)
}

// required .IM.BaseDefine.UserStatType online_status = 3;
inline bool IMLoginReq::has_online_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IMLoginReq::set_has_online_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IMLoginReq::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IMLoginReq::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMLoginReq::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMLoginReq::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.online_status)
}

// required .IM.BaseDefine.ClientType client_type = 4;
inline bool IMLoginReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IMLoginReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IMLoginReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IMLoginReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMLoginReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMLoginReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_type)
}

// optional string client_version = 5;
inline bool IMLoginReq::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginReq::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginReq::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginReq::clear_client_version() {
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_version();
}
inline const ::std::string& IMLoginReq::client_version() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.client_version)
  return client_version_.GetNoArena();
}
inline void IMLoginReq::set_client_version(const ::std::string& value) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.client_version)
}
#if LANG_CXX11
inline void IMLoginReq::set_client_version(::std::string&& value) {
  set_has_client_version();
  client_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.client_version)
}
#endif
inline void IMLoginReq::set_client_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.client_version)
}
inline void IMLoginReq::set_client_version(const char* value, size_t size) {
  set_has_client_version();
  client_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.client_version)
}
inline ::std::string* IMLoginReq::mutable_client_version() {
  set_has_client_version();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.client_version)
  return client_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_client_version() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.client_version)
  if (!has_client_version()) {
    return NULL;
  }
  clear_has_client_version();
  return client_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_client_version(::std::string* client_version) {
  if (client_version != NULL) {
    set_has_client_version();
  } else {
    clear_has_client_version();
  }
  client_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_version);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.client_version)
}

// required string user_id = 6;
inline bool IMLoginReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& IMLoginReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.user_id)
  return user_id_.GetNoArena();
}
inline void IMLoginReq::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.user_id)
}
#if LANG_CXX11
inline void IMLoginReq::set_user_id(::std::string&& value) {
  set_has_user_id();
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.user_id)
}
#endif
inline void IMLoginReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.user_id)
}
inline void IMLoginReq::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.user_id)
}
inline ::std::string* IMLoginReq::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_user_id() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.user_id)
  if (!has_user_id()) {
    return NULL;
  }
  clear_has_user_id();
  return user_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.user_id)
}

// required string appid = 7;
inline bool IMLoginReq::has_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginReq::set_has_appid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginReq::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appid();
}
inline const ::std::string& IMLoginReq::appid() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.appid)
  return appid_.GetNoArena();
}
inline void IMLoginReq::set_appid(const ::std::string& value) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.appid)
}
#if LANG_CXX11
inline void IMLoginReq::set_appid(::std::string&& value) {
  set_has_appid();
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.appid)
}
#endif
inline void IMLoginReq::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.appid)
}
inline void IMLoginReq::set_appid(const char* value, size_t size) {
  set_has_appid();
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.appid)
}
inline ::std::string* IMLoginReq::mutable_appid() {
  set_has_appid();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.appid)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_appid() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.appid)
  if (!has_appid()) {
    return NULL;
  }
  clear_has_appid();
  return appid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    set_has_appid();
  } else {
    clear_has_appid();
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.appid)
}

// required string token = 8;
inline bool IMLoginReq::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IMLoginReq::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IMLoginReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IMLoginReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& IMLoginReq::token() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginReq.token)
  return token_.GetNoArena();
}
inline void IMLoginReq::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginReq.token)
}
#if LANG_CXX11
inline void IMLoginReq::set_token(::std::string&& value) {
  set_has_token();
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginReq.token)
}
#endif
inline void IMLoginReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginReq.token)
}
inline void IMLoginReq::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginReq.token)
}
inline ::std::string* IMLoginReq::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginReq::release_token() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginReq.token)
  if (!has_token()) {
    return NULL;
  }
  clear_has_token();
  return token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginReq.token)
}

// -------------------------------------------------------------------

// IMLoginRes

// required uint32 server_time = 1;
inline bool IMLoginRes::has_server_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMLoginRes::set_has_server_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMLoginRes::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMLoginRes::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 IMLoginRes::server_time() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.server_time)
  return server_time_;
}
inline void IMLoginRes::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.server_time)
}

// required .IM.BaseDefine.ResultType result_code = 2;
inline bool IMLoginRes::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMLoginRes::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMLoginRes::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMLoginRes::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::IM::BaseDefine::ResultType IMLoginRes::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_code)
  return static_cast< ::IM::BaseDefine::ResultType >(result_code_);
}
inline void IMLoginRes::set_result_code(::IM::BaseDefine::ResultType value) {
  assert(::IM::BaseDefine::ResultType_IsValid(value));
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_code)
}

// optional string result_string = 3;
inline bool IMLoginRes::has_result_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLoginRes::set_has_result_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLoginRes::clear_has_result_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLoginRes::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_result_string();
}
inline const ::std::string& IMLoginRes::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.result_string)
  return result_string_.GetNoArena();
}
inline void IMLoginRes::set_result_string(const ::std::string& value) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.result_string)
}
#if LANG_CXX11
inline void IMLoginRes::set_result_string(::std::string&& value) {
  set_has_result_string();
  result_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMLoginRes.result_string)
}
#endif
inline void IMLoginRes::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMLoginRes.result_string)
}
inline void IMLoginRes::set_result_string(const char* value, size_t size) {
  set_has_result_string();
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMLoginRes.result_string)
}
inline ::std::string* IMLoginRes::mutable_result_string() {
  set_has_result_string();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMLoginRes::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginRes.result_string)
  if (!has_result_string()) {
    return NULL;
  }
  clear_has_result_string();
  return result_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMLoginRes::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    set_has_result_string();
  } else {
    clear_has_result_string();
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.result_string)
}

// optional .IM.BaseDefine.UserStatType online_status = 4;
inline bool IMLoginRes::has_online_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IMLoginRes::set_has_online_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IMLoginRes::clear_has_online_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IMLoginRes::clear_online_status() {
  online_status_ = 1;
  clear_has_online_status();
}
inline ::IM::BaseDefine::UserStatType IMLoginRes::online_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.online_status)
  return static_cast< ::IM::BaseDefine::UserStatType >(online_status_);
}
inline void IMLoginRes::set_online_status(::IM::BaseDefine::UserStatType value) {
  assert(::IM::BaseDefine::UserStatType_IsValid(value));
  set_has_online_status();
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLoginRes.online_status)
}

// optional .IM.BaseDefine.UserInfo user_info = 5;
inline bool IMLoginRes::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMLoginRes::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMLoginRes::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::IM::BaseDefine::UserInfo& IMLoginRes::_internal_user_info() const {
  return *user_info_;
}
inline const ::IM::BaseDefine::UserInfo& IMLoginRes::user_info() const {
  const ::IM::BaseDefine::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:IM.Login.IMLoginRes.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::IM::BaseDefine::UserInfo*>(
      &::IM::BaseDefine::_UserInfo_default_instance_);
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::release_user_info() {
  // @@protoc_insertion_point(field_release:IM.Login.IMLoginRes.user_info)
  clear_has_user_info();
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMLoginRes::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) {
    auto* p = CreateMaybeMessage<::IM::BaseDefine::UserInfo>(GetArenaNoVirtual());
    user_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:IM.Login.IMLoginRes.user_info)
  return user_info_;
}
inline void IMLoginRes::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMLoginRes.user_info)
}

// -------------------------------------------------------------------

// IMLogoutReq

// -------------------------------------------------------------------

// IMLogoutRsp

// required uint32 result_code = 1;
inline bool IMLogoutRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMLogoutRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMLogoutRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMLogoutRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMLogoutRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMLogoutRsp.result_code)
  return result_code_;
}
inline void IMLogoutRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMLogoutRsp.result_code)
}

// -------------------------------------------------------------------

// IMKickUser

// required uint32 user_id = 1;
inline bool IMKickUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMKickUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMKickUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMKickUser::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.user_id)
  return user_id_;
}
inline void IMKickUser::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.user_id)
}

// required .IM.BaseDefine.KickReasonType kick_reason = 2;
inline bool IMKickUser::has_kick_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMKickUser::set_has_kick_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMKickUser::clear_has_kick_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMKickUser::clear_kick_reason() {
  kick_reason_ = 1;
  clear_has_kick_reason();
}
inline ::IM::BaseDefine::KickReasonType IMKickUser::kick_reason() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickUser.kick_reason)
  return static_cast< ::IM::BaseDefine::KickReasonType >(kick_reason_);
}
inline void IMKickUser::set_kick_reason(::IM::BaseDefine::KickReasonType value) {
  assert(::IM::BaseDefine::KickReasonType_IsValid(value));
  set_has_kick_reason();
  kick_reason_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickUser.kick_reason)
}

// -------------------------------------------------------------------

// IMDeviceTokenReq

// required uint32 user_id = 1;
inline bool IMDeviceTokenReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMDeviceTokenReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMDeviceTokenReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMDeviceTokenReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.user_id)
  return user_id_;
}
inline void IMDeviceTokenReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.user_id)
}

// required string device_token = 2;
inline bool IMDeviceTokenReq::has_device_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDeviceTokenReq::set_has_device_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDeviceTokenReq::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDeviceTokenReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_token();
}
inline const ::std::string& IMDeviceTokenReq::device_token() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.device_token)
  return device_token_.GetNoArena();
}
inline void IMDeviceTokenReq::set_device_token(const ::std::string& value) {
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.device_token)
}
#if LANG_CXX11
inline void IMDeviceTokenReq::set_device_token(::std::string&& value) {
  set_has_device_token();
  device_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMDeviceTokenReq.device_token)
}
#endif
inline void IMDeviceTokenReq::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenReq.device_token)
}
inline void IMDeviceTokenReq::set_device_token(const char* value, size_t size) {
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenReq.device_token)
}
inline ::std::string* IMDeviceTokenReq::mutable_device_token() {
  set_has_device_token();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMDeviceTokenReq::release_device_token() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenReq.device_token)
  if (!has_device_token()) {
    return NULL;
  }
  clear_has_device_token();
  return device_token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMDeviceTokenReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    set_has_device_token();
  } else {
    clear_has_device_token();
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.device_token)
}

// optional .IM.BaseDefine.ClientType client_type = 3;
inline bool IMDeviceTokenReq::has_client_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMDeviceTokenReq::set_has_client_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMDeviceTokenReq::clear_has_client_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMDeviceTokenReq::clear_client_type() {
  client_type_ = 1;
  clear_has_client_type();
}
inline ::IM::BaseDefine::ClientType IMDeviceTokenReq::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMDeviceTokenReq::set_client_type(::IM::BaseDefine::ClientType value) {
  assert(::IM::BaseDefine::ClientType_IsValid(value));
  set_has_client_type();
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.client_type)
}

// optional bytes attach_data = 20;
inline bool IMDeviceTokenReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDeviceTokenReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDeviceTokenReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDeviceTokenReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& IMDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMDeviceTokenReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenReq.attach_data)
}
#if LANG_CXX11
inline void IMDeviceTokenReq::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMDeviceTokenReq.attach_data)
}
#endif
inline void IMDeviceTokenReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenReq.attach_data)
}
inline void IMDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenReq.attach_data)
}
inline ::std::string* IMDeviceTokenReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMDeviceTokenReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenReq.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMDeviceTokenRsp

// required uint32 user_id = 1;
inline bool IMDeviceTokenRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMDeviceTokenRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMDeviceTokenRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMDeviceTokenRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMDeviceTokenRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.user_id)
  return user_id_;
}
inline void IMDeviceTokenRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.user_id)
}

// optional bytes attach_data = 20;
inline bool IMDeviceTokenRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMDeviceTokenRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMDeviceTokenRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMDeviceTokenRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& IMDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMDeviceTokenRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMDeviceTokenRsp.attach_data)
}
#if LANG_CXX11
inline void IMDeviceTokenRsp::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMDeviceTokenRsp.attach_data)
}
#endif
inline void IMDeviceTokenRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMDeviceTokenRsp.attach_data)
}
inline void IMDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMDeviceTokenRsp.attach_data)
}
inline ::std::string* IMDeviceTokenRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMDeviceTokenRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMDeviceTokenRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMDeviceTokenRsp.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMKickPCClientReq

// required uint32 user_id = 1;
inline bool IMKickPCClientReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMKickPCClientReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMKickPCClientReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMKickPCClientReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMKickPCClientReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientReq.user_id)
  return user_id_;
}
inline void IMKickPCClientReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientReq.user_id)
}

// -------------------------------------------------------------------

// IMKickPCClientRsp

// required uint32 user_id = 1;
inline bool IMKickPCClientRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMKickPCClientRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMKickPCClientRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMKickPCClientRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMKickPCClientRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientRsp.user_id)
  return user_id_;
}
inline void IMKickPCClientRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientRsp.user_id)
}

// required uint32 result_code = 2;
inline bool IMKickPCClientRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMKickPCClientRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMKickPCClientRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMKickPCClientRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMKickPCClientRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMKickPCClientRsp.result_code)
  return result_code_;
}
inline void IMKickPCClientRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMKickPCClientRsp.result_code)
}

// -------------------------------------------------------------------

// IMPushShieldReq

// required uint32 user_id = 1;
inline bool IMPushShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.user_id)
  return user_id_;
}
inline void IMPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.user_id)
}

// required uint32 shield_status = 2;
inline bool IMPushShieldReq::has_shield_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushShieldReq::set_has_shield_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushShieldReq::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushShieldReq::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMPushShieldReq::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.shield_status)
  return shield_status_;
}
inline void IMPushShieldReq::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMPushShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushShieldReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& IMPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMPushShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldReq.attach_data)
}
#if LANG_CXX11
inline void IMPushShieldReq::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMPushShieldReq.attach_data)
}
#endif
inline void IMPushShieldReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMPushShieldReq.attach_data)
}
inline void IMPushShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMPushShieldReq.attach_data)
}
inline ::std::string* IMPushShieldReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMPushShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMPushShieldReq.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMPushShieldRsp

// required uint32 user_id = 1;
inline bool IMPushShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMPushShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMPushShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.user_id)
  return user_id_;
}
inline void IMPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.user_id)
}

// required uint32 result_code = 2;
inline bool IMPushShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMPushShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMPushShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.result_code)
  return result_code_;
}
inline void IMPushShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.result_code)
}

// optional uint32 shield_status = 3;
inline bool IMPushShieldRsp::has_shield_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMPushShieldRsp::set_has_shield_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMPushShieldRsp::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.shield_status)
  return shield_status_;
}
inline void IMPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMPushShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMPushShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMPushShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMPushShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& IMPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMPushShieldRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMPushShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMPushShieldRsp.attach_data)
}
#if LANG_CXX11
inline void IMPushShieldRsp::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMPushShieldRsp.attach_data)
}
#endif
inline void IMPushShieldRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMPushShieldRsp.attach_data)
}
inline void IMPushShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMPushShieldRsp.attach_data)
}
inline ::std::string* IMPushShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMPushShieldRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMPushShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMPushShieldRsp.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMPushShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldReq

// required uint32 user_id = 1;
inline bool IMQueryPushShieldReq::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMQueryPushShieldReq::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMQueryPushShieldReq::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMQueryPushShieldReq::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldReq::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.user_id)
  return user_id_;
}
inline void IMQueryPushShieldReq::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.user_id)
}

// optional bytes attach_data = 20;
inline bool IMQueryPushShieldReq::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMQueryPushShieldReq::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMQueryPushShieldReq::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMQueryPushShieldReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& IMQueryPushShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMQueryPushShieldReq::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldReq.attach_data)
}
#if LANG_CXX11
inline void IMQueryPushShieldReq::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMQueryPushShieldReq.attach_data)
}
#endif
inline void IMQueryPushShieldReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMQueryPushShieldReq.attach_data)
}
inline void IMQueryPushShieldReq::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMQueryPushShieldReq.attach_data)
}
inline ::std::string* IMQueryPushShieldReq::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMQueryPushShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMQueryPushShieldReq.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMQueryPushShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMQueryPushShieldRsp

// required uint32 user_id = 1;
inline bool IMQueryPushShieldRsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IMQueryPushShieldRsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IMQueryPushShieldRsp::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.user_id)
  return user_id_;
}
inline void IMQueryPushShieldRsp::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.user_id)
}

// required uint32 result_code = 2;
inline bool IMQueryPushShieldRsp::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IMQueryPushShieldRsp::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IMQueryPushShieldRsp::clear_result_code() {
  result_code_ = 0u;
  clear_has_result_code();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.result_code)
  return result_code_;
}
inline void IMQueryPushShieldRsp::set_result_code(::google::protobuf::uint32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.result_code)
}

// optional uint32 shield_status = 3;
inline bool IMQueryPushShieldRsp::has_shield_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_shield_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IMQueryPushShieldRsp::clear_has_shield_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IMQueryPushShieldRsp::clear_shield_status() {
  shield_status_ = 0u;
  clear_has_shield_status();
}
inline ::google::protobuf::uint32 IMQueryPushShieldRsp::shield_status() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.shield_status)
  return shield_status_;
}
inline void IMQueryPushShieldRsp::set_shield_status(::google::protobuf::uint32 value) {
  set_has_shield_status();
  shield_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.shield_status)
}

// optional bytes attach_data = 20;
inline bool IMQueryPushShieldRsp::has_attach_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMQueryPushShieldRsp::set_has_attach_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMQueryPushShieldRsp::clear_has_attach_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMQueryPushShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attach_data();
}
inline const ::std::string& IMQueryPushShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Login.IMQueryPushShieldRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMQueryPushShieldRsp::set_attach_data(const ::std::string& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Login.IMQueryPushShieldRsp.attach_data)
}
#if LANG_CXX11
inline void IMQueryPushShieldRsp::set_attach_data(::std::string&& value) {
  set_has_attach_data();
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Login.IMQueryPushShieldRsp.attach_data)
}
#endif
inline void IMQueryPushShieldRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Login.IMQueryPushShieldRsp.attach_data)
}
inline void IMQueryPushShieldRsp::set_attach_data(const void* value, size_t size) {
  set_has_attach_data();
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Login.IMQueryPushShieldRsp.attach_data)
}
inline ::std::string* IMQueryPushShieldRsp::mutable_attach_data() {
  set_has_attach_data();
  // @@protoc_insertion_point(field_mutable:IM.Login.IMQueryPushShieldRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMQueryPushShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Login.IMQueryPushShieldRsp.attach_data)
  if (!has_attach_data()) {
    return NULL;
  }
  clear_has_attach_data();
  return attach_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMQueryPushShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    set_has_attach_data();
  } else {
    clear_has_attach_data();
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Login.IMQueryPushShieldRsp.attach_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_IM_2eLogin_2eproto
